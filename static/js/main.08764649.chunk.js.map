{"version":3,"sources":["Navbar.js","info.js","grid.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","algo","className","class","onClick","dfs","bfs","done","clear","showinfo","Info","document","getElementsByClassName","style","display","Grid","Node","x","y","z","this","Pair","index","id","ind","i","length","Number","slice","Gridarr","Array","CalledBy","g","j","arr","arr2","node","push","ac","AbortController","signal","useState","mainArr","setMainArr","doneChanging","setdoneChanging","canChange","setcanChange","startingNode","setStartingNode","chooseAlgo","setChooseAlgo","algoset","setAlgoset","setStop","endingNode","dx","dy","check","findPath","last","p","getElementById","background","sleep","milliseconds","Promise","resolve","setTimeout","yellowNodes","doSomething","a","item","item2","name","lastnode","nextNode","makeItWhite","changeColor","e","target","v","q","firstnode","topElement","shift","arrays","map","array","nodes","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.08764649.chunk.js","sourcesContent":["const Navbar = (props) => {\r\n\r\n    const algo = props.algo;\r\n    \r\n    return ( \r\n        <div className = \"menuBar\">\r\n            <p>PathFinder</p>\r\n\r\n            <div className=\"options\">\r\n                <div class=\"dropdown\">\r\n                    {algo === 1 && <button class=\"dropbtn\">BFS</button>}\r\n                    {algo === 2 && <button class=\"dropbtn\">DFS</button>}\r\n                    {algo === -1 && <button class=\"dropbtn\">Traversal</button>}\r\n                    <div class=\"dropdown-content\">\r\n                        <button onClick = {props.dfs}>DFS</button>\r\n                        <button onClick = {props.bfs}>BFS</button>\r\n                    </div>\r\n                </div>\r\n\r\n                <button className = \"_done\" onClick = {props.done}>DONE CREATING BARRIERS</button>\r\n                <button className = \"_reset\" onClick = {props.clear}>RESET</button>\r\n                <button className=\"info-btn\" onClick={props.showinfo}>HELP !</button>\r\n            </div>\r\n        </div>\r\n            \r\n     );\r\n}\r\n \r\nexport default Navbar;","const Info = () => {\r\n\r\n    const hide = () => {\r\n        document.getElementsByClassName('infopage')[0].style.display = \"none\";\r\n    }\r\n\r\n    return ( \r\n        <div className=\"infopage\">\r\n            <div className=\"blur\"></div>\r\n            <div className=\"instructions\">\r\n                    <h1 className=\"_heading\">How to use?</h1>\r\n                    <ol>\r\n                        <li>Choose a Traversal</li>\r\n                        <li>Create barriers by clicking on grid cells.</li>\r\n                        <li>Click on \"DONE CREATING BARRIERS\".</li>\r\n                        <li>Choose a starting point and ending point.</li>\r\n                    </ol> \r\n                    <div className=\"close-btn-container\">\r\n                        <button className=\"close-btn\" onClick={hide}>CLOSE</button>\r\n                    </div>\r\n                    \r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Info;","import { useState } from 'react';\r\nimport Navbar from './Navbar';\r\nimport Info from './info';\r\n\r\nconst Grid = () => {\r\n\r\nclass Node {\r\nconstructor(x, y,z) {\r\n     this.x = x;\r\n     this.y = y;\r\n     this.z = z;\r\n}\r\n}\r\n\r\n\r\nclass Pair {\r\nconstructor(x,y){\r\n     this.x = x;\r\n     this.y = y;\r\n}\r\n}\r\n\r\n\r\n// function to get index of clicked element \r\nconst index = (id) => {\r\nlet ind = 0;\r\nfor(var i = 0;i<id.length;i++){\r\n     if(id[i]===\" \"){\r\n          ind = i;\r\n          break;\r\n     }\r\n}\r\nvar x = Number(id.slice(0,ind));\r\nvar y = Number(id.slice(ind+1,id.length));\r\nreturn [x,y];\r\n}\r\n\r\n\r\n\r\nvar Gridarr = new Array(50);\r\nvar CalledBy = new Array(50);\r\nconst g = new Pair(-1,-1);\r\nfor(let i = 0;i<50;i++){\r\nGridarr[i] = new Array(70);\r\nCalledBy[i] = new Array(70);\r\nfor(let j = 0;j<70;j++){\r\n     Gridarr[i][j] = 0;\r\n     CalledBy[i][j] = g;\r\n}\r\n}\r\n\r\nvar arr = [];\r\nfor(let i = 0;i<50;i++){\r\n     var arr2 = [];\r\n     for(let j = 0;j<70;j++){\r\n          var node = new Node(i,j,i+\" \"+j);\r\n          arr2.push(node);\r\n     }\r\n     arr.push(arr2)\r\n}\r\n\r\nconst ac = new AbortController();\r\nconst signal = ac.signal;\r\nconst [mainArr,setMainArr] = useState(Gridarr);\r\nconst [doneChanging,setdoneChanging] = useState(0);\r\nconst [canChange,setcanChange] = useState(true);\r\nconst [startingNode,setStartingNode] = useState([]);\r\nconst [chooseAlgo, setChooseAlgo] = useState(-1); // changes for dfs\r\nconst [algoset,setAlgoset] = useState(false);\r\nconst [stop, setStop] = useState(false);\r\nconst endingNode = [];\r\n\r\n\r\nvar dx = [1,-1,0,0];\r\nvar dy = [0,0,1,-1];\r\n\r\n\r\n\r\n// function to check a valid node : ------------------\r\nconst check = (x,y) => {\r\n     if(x<0 || y<0 || x>=50 || y>=70 || Gridarr[x][y]===-1 || Gridarr[x][y]===1)return false;\r\n     return true;\r\n}\r\n// ---------------------------------------------------------\r\n\r\n\r\n\r\nconst findPath = (last) => {\r\n     var p = last.x + \" \" + last.y;\r\n\r\n     if(last.x==startingNode[0] && last.y==startingNode[1])return; \r\n\r\n     document.getElementById(p).style.background = \"#60f149\";\r\n     var g = CalledBy[last.x][last.y];  \r\n\r\n     findPath(g);  \r\n}\r\n\r\n\r\nconst sleep = (milliseconds) => {\r\nreturn new Promise(resolve => setTimeout(resolve, milliseconds))\r\n}\r\n\r\nvar yellowNodes = [];\r\n\r\nconst doSomething = async ({ signal }) => {\r\n\r\n\r\n     for (const item of yellowNodes) {\r\n          try{\r\n               await sleep(10)\r\n               var g = index(item);\r\n               if(g[0]<0 || g[1]<0){\r\n                    const item2 = -1*g[0] +\" \"+ (-1*g[1]);\r\n                    document.getElementById(item2).style.background = \"white\";\r\n               }else{\r\n                    document.getElementById(item).style.background = \"#be2fe2\";   \r\n               }\r\n          }catch (e) {\r\n                    if(e.name !== 'AbortError') throw e;\r\n               }\r\n     }\r\n     var node = new Pair(endingNode[0],endingNode[1]);\r\n     findPath(node);\r\n\r\n}\r\n\r\n// ------------------------------------------------------------- code for bfs : \r\nconst bfs = () => {\r\n     var q = [];\r\n     const firstnode = new Pair(startingNode[0],startingNode[1]);\r\n     const lastnode = new Pair(endingNode[0],endingNode[1]);\r\n     Gridarr[firstnode.x][firstnode.y] = 1;\r\n     q.push(firstnode);\r\n     var count = 0;\r\n\r\n     while(q.length!==0){\r\n          const topElement = q[0];\r\n          q.shift();\r\n          var done = false;\r\n          for(var i = 0;i<4;i++){\r\n               if(check(topElement.x+dx[i],topElement.y+dy[i])){\r\n                    count++;\r\n                    CalledBy[topElement.x + dx[i]][topElement.y + dy[i]] = new Pair(topElement.x,topElement.y);\r\n                    const node = new Pair(topElement.x + dx[i],topElement.y + dy[i]);\r\n                    Gridarr[topElement.x + dx[i]][topElement.y + dy[i]] = 1;\r\n                    q.push(node);\r\n                    var p = node.x +\" \"+node.y;\r\n                    if(node.x===lastnode.x && node.y === lastnode.y){\r\n                         done = true;\r\n                         doSomething({ signal: ac.signal });\r\n                         break;\r\n                    }\r\n                    yellowNodes.push(p);\r\n               }\r\n          }\r\n          if(done){\r\n               break;\r\n          }\r\n     }\r\n}\r\n// ----------------------------------------------------------------- code for bfs ends here \r\n\r\n// ------------------------------------------------------------------ code for dfs starts here : \r\n\r\nconst dfs = (node) => {\r\n\r\nconst firstnode = new Pair(startingNode[0],startingNode[1]);\r\nconst lastnode = new Pair(endingNode[0],endingNode[1]);\r\n\r\nif(lastnode.x === node.x && node.y === lastnode.y){\r\n     doSomething({ signal: ac.signal });\r\n     return true;\r\n}\r\n\r\nyellowNodes.push(node.x + \" \" + node.y);\r\n\r\nGridarr[node.x][node.y] = 1;\r\n\r\nfor(let i = 0;i<4;i++){\r\n     if(check(node.x + dx[i],node.y + dy[i])){\r\n          Gridarr[node.x + dx[i]][node.y + dy[i]] = 1;\r\n          const nextNode = new Pair(node.x + dx[i],node.y + dy[i]);\r\n          if(dfs(nextNode)){\r\n               CalledBy[nextNode.x][nextNode.y] = node;\r\n               return true;\r\n          }else{\r\n               const makeItWhite = new Pair(-1*(node.x + dx[i]),-1*(node.y + dy[i]));\r\n               yellowNodes.push(makeItWhite.x +\" \"+ makeItWhite.y);\r\n          }\r\n     }\r\n}\r\n\r\nreturn false;\r\n\r\n}\r\n\r\n\r\n// -----------------------------------------------------------------------code for dfs ends here : \r\n\r\n\r\n\r\nconst changeColor = (e) => {\r\n     if(chooseAlgo === -1 || chooseAlgo === -2){\r\n          setAlgoset(true);\r\n          return;\r\n     }\r\n     Gridarr = mainArr;\r\n     if(!canChange)return;\r\n     var g = e.target.id;\r\n     var v = index(g);\r\n     if(Gridarr[v[0]][v[1]]===-1){\r\n          Gridarr[v[0]][v[1]] = 0;\r\n          setMainArr(Gridarr);\r\n          e.target.style.background = \"white\";\r\n          return;\r\n     }\r\n\r\n     if(doneChanging===0){\r\n          Gridarr[v[0]][v[1]] = -1;\r\n          setMainArr(Gridarr);\r\n          e.target.style.background = \"#293527\";\r\n     }else if(doneChanging===1){\r\n          setStartingNode(v);\r\n          e.target.style.background = \"red\";\r\n          setdoneChanging(2);\r\n     }else{\r\n          endingNode.push(v[0]);\r\n          endingNode.push(v[1]);\r\n          e.target.style.background = \"blue\";\r\n          setcanChange(false);\r\n          Gridarr = mainArr;\r\n          if(chooseAlgo==1){\r\n               bfs();  \r\n          }else{\r\n               const node = new Pair(startingNode[0],startingNode[1]);\r\n               dfs(node); \r\n          }\r\n          \r\n     }\r\n     \r\n}\r\n\r\nconst clear = () => {\r\n     for(let i = 0;i<50;i++){\r\n          for(let j = 0;j<70;j++){\r\n               var id = i + \" \" +j;\r\n               Gridarr[i][j] = 0;\r\n               document.getElementById(id).style.background = \"white\";\r\n          }\r\n     }\r\n     setMainArr(Gridarr);\r\n     setdoneChanging(0);\r\n     setcanChange(true);\r\n     setChooseAlgo(-1);\r\n     setStop(true);\r\n}\r\n\r\nconst showinfo = () => {\r\n     document.getElementsByClassName('infopage')[0].style.display = \"block\";\r\n}\r\n\r\n\r\nreturn ( \r\n     <div className='Grid'>\r\n          <Info/>\r\n          <Navbar done = {()=>(setdoneChanging(1))} dfs = {()=>{setChooseAlgo(2); setAlgoset(false)}} bfs = {()=>{setChooseAlgo(1); setAlgoset(false)}} clear = {() => clear()}  arrays = {Gridarr} algo = {chooseAlgo} showinfo = {showinfo}/>\r\n          {algoset && <p className='choose'>* FIRST CHOOSE A TRAVERSAL</p>}\r\n          <div className = \"OuterBox\">\r\n               {arr.map((array) => (\r\n                    <div className = \"innerBox\">\r\n                         {array.map((nodes)=>(\r\n                         <button className = \"NodeButton\" onClick = {changeColor}>\r\n                              <div className = \"_node\"  id = {nodes.z}></div>\r\n                         </button>    \r\n                         ))}\r\n                    </div>\r\n                    \r\n               ))}\r\n          </div>\r\n     </div>\r\n);\r\n}\r\n\r\nexport default Grid;","import './App.css';\r\nimport './index.css';\r\nimport Grid from './grid';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Grid/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}